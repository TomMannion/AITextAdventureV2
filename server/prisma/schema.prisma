// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  username          String         @unique @db.VarChar(50)
  email             String         @unique @db.VarChar(100)
  password          String         @db.VarChar(255)
  preferredProvider String?        @db.VarChar(50)
  preferredModel    String?        @db.VarChar(50)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  games             Game[]
  contextConfig     ContextConfig?

  @@index([email])
}

model Game {
  id               Int            @id @default(autoincrement())
  title            String         @db.VarChar(100)
  genre            String         @db.VarChar(50)
  status           GameStatus     @default(ACTIVE)
  lastPlayedAt     DateTime       @default(now())
  turnCount        Int            @default(0)
  initialStory     String?        @db.Text
  totalTurns       Int            @default(16)
  summary          String?        @db.Text
  endingSummary    Json?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  // Story element components
  narrativeVoice   String?        @db.VarChar(50)
  pacingTechnique  String?        @db.VarChar(50) 
  subgenre         String?        @db.VarChar(50)
  emotionalCore    String?        @db.VarChar(50)
  settingType      String?        @db.VarChar(50)
  languageStyle    String?        @db.VarChar(50)
  choiceDesign     String?        @db.VarChar(50)
  
  // Complete story elements configuration
  storyElements    Json?
  
  // Relations
  userId           Int
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  storySegments    StorySegment[]

  @@index([userId])
  @@index([status])
  @@index([genre])
}

model StorySegment {
  id               Int       @id @default(autoincrement())
  sequenceNumber   Int
  segmentTitle     String    @db.Text
  content          String    @db.Text
  userChoice       String?   @db.Text
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  gameId           Int
  game             Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  options          Option[]

  @@index([gameId, sequenceNumber])
  @@unique([gameId, sequenceNumber])
}

model Option {
  id               Int       @id @default(autoincrement())
  text             String    @db.Text
  wasChosen        Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  storySegmentId   Int
  storySegment     StorySegment @relation(fields: [storySegmentId], references: [id], onDelete: Cascade)

  @@index([storySegmentId])
}

model ContextConfig {
  id               Int       @id @default(autoincrement())
  maxSegments      Int       @default(16)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  userId           Int       @unique
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum GameStatus {
  ACTIVE
  COMPLETED
  ABANDONED
}
